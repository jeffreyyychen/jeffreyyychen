<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test</title>
    <link href="/blog/2020/11/14/test/"/>
    <url>/blog/2020/11/14/test/</url>
    
    <content type="html"><![CDATA[<h1 id="123131dd"><a href="#123131dd" class="headerlink" title="123131dd"></a>123131dd</h1><h1 id="dsfsdfsdf"><a href="#dsfsdfsdf" class="headerlink" title="dsfsdfsdf"></a>dsfsdfsdf</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql安装</title>
    <link href="/blog/2020/11/14/Mysql%E5%AE%89%E8%A3%85/"/>
    <url>/blog/2020/11/14/Mysql%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker安装Mysql"><a href="#Docker安装Mysql" class="headerlink" title="Docker安装Mysql"></a>Docker安装Mysql</h2><p>1.拉取镜像</p><p>2.运行mysql</p><pre><code class="hljs powershell">docker run<span class="hljs-literal">-d</span><span class="hljs-literal">-p</span> <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> -<span class="hljs-literal">-name</span> [<span class="hljs-type">Name</span>] [<span class="hljs-type">ImageName</span>]<span class="hljs-comment"># 示例</span>docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">-p</span> <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> -<span class="hljs-literal">-name</span> mysql01 mysql/mysql<span class="hljs-literal">-server</span></code></pre><p>3.进入容器</p><pre><code class="hljs gauss">docker <span class="hljs-built_in">exec</span>-it[ContainerName] bash<span class="hljs-comment">//示例</span>docker <span class="hljs-built_in">exec</span> -it mysql01 bash</code></pre><p>4.进入mysql的命令行<br>命令行进入mysql的root账户：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">mysql -uroot -p</span></code></pre><p>这时候操作mysql会报错 ，让修改密码 请看 常见错误解决模块</p><h3 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h3><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;test&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;pwd123456&#x27;</span>;mysql&gt; <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;test&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span>;mysql&gt; <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;test&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;pwd123456&#x27;</span>;mysql&gt; <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;test&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span>;</code></pre><h3 id="修改MYSQL-默认字符集"><a href="#修改MYSQL-默认字符集" class="headerlink" title="修改MYSQL 默认字符集"></a>修改MYSQL 默认字符集</h3><p>添加到my.cnf</p><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><span class="hljs-attr">character-set-server</span>=utf8<span class="hljs-section">[client]</span><span class="hljs-attr">default-character-set</span>=utf8 <span class="hljs-section">[mysql]</span><span class="hljs-attr">default-character-set</span>=utf8</code></pre><p>查看字符集命令</p><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">variables</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%char%&#x27;</span>;</code></pre><h3 id="docker容器参数启动Mysql-用容器参数添加新用户和修改root账户密码，修改字符集"><a href="#docker容器参数启动Mysql-用容器参数添加新用户和修改root账户密码，修改字符集" class="headerlink" title="docker容器参数启动Mysql (用容器参数添加新用户和修改root账户密码，修改字符集)"></a>docker容器参数启动Mysql (用容器参数添加新用户和修改root账户密码，修改字符集)</h3><p>直接复制这个就可以了</p><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -d -p 3306:3306 -e <span class="hljs-attribute">MYSQL_USER</span>=<span class="hljs-string">&quot;test&quot;</span> -e <span class="hljs-attribute">MYSQL_PASSWORD</span>=<span class="hljs-string">&quot;test123&quot;</span> -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=<span class="hljs-string">&quot;test123&quot;</span> --name mysql01 mysql/mysql-server  <span class="hljs-attribute">--character-set-server</span>=utf8 <span class="hljs-attribute">--collation-server</span>=utf8_general_ci</code></pre><p>这个和上面一样只不过用换行整理过（不要复制这个，用不了）</p><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -d -p 3306:3306-e <span class="hljs-attribute">MYSQL_USER</span>=<span class="hljs-string">&quot;test&quot;</span>-e <span class="hljs-attribute">MYSQL_PASSWORD</span>=<span class="hljs-string">&quot;password&quot;</span>-e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=<span class="hljs-string">&quot;password&quot;</span>--name [Name] [ImageName]<span class="hljs-attribute">--character-set-server</span>=utf8<span class="hljs-attribute">--collation-server</span>=utf8_general_ci</code></pre><h2 id="挂载资料卷"><a href="#挂载资料卷" class="headerlink" title="挂载资料卷"></a>挂载资料卷</h2><h3 id="mysql挂载资料卷"><a href="#mysql挂载资料卷" class="headerlink" title="mysql挂载资料卷"></a>mysql挂载资料卷</h3><p>#注意:需要先创建/docker/mysql/config/my.cnf文件和/docker/mysql/data文件夹。</p><p>my.cnf如下</p><pre><code class="hljs c#">[<span class="hljs-meta">mysqld</span>]user=mysqlcharacter-<span class="hljs-keyword">set</span>-server=utf8[<span class="hljs-meta">client</span>]<span class="hljs-literal">default</span>-character-<span class="hljs-keyword">set</span>=utf8[<span class="hljs-meta">mysql</span>]<span class="hljs-literal">default</span>-character-<span class="hljs-keyword">set</span>=utf8</code></pre><p>用外部volume</p><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span>-e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&quot;root&quot;</span> --name mysql01 -v=<span class="hljs-regexp">/docker/my</span>sql<span class="hljs-regexp">/config/my</span>.cnf:<span class="hljs-regexp">/etc/my</span>.cnf -v=<span class="hljs-regexp">/docker/my</span>sql<span class="hljs-regexp">/data:/</span>var<span class="hljs-regexp">/lib/my</span>sql mysql</code></pre><h3 id="mongo挂载资料卷"><a href="#mongo挂载资料卷" class="headerlink" title="mongo挂载资料卷"></a>mongo挂载资料卷</h3><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">27017</span>:<span class="hljs-number">27017</span> --name mongo01 -v <span class="hljs-regexp">/docker/m</span>ongo<span class="hljs-regexp">/config:/</span>data<span class="hljs-regexp">/configdb -v /</span>docker<span class="hljs-regexp">/mongo/</span>db:<span class="hljs-regexp">/data/</span>db mongo</code></pre><h2 id="常见错误解决"><a href="#常见错误解决" class="headerlink" title="常见错误解决"></a>常见错误解决</h2><h3 id="修改密码语句"><a href="#修改密码语句" class="headerlink" title="修改密码语句"></a>修改密码语句</h3><p>mysql5.7版本语法：</p><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span> <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> = <span class="hljs-keyword">PASSWORD</span>(<span class="hljs-string">&#x27;password&#x27;</span>);</code></pre><p>mysql5.7之后版本语法：</p><pre><code class="hljs routeros">ALTER<span class="hljs-built_in"> user </span><span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;password&#x27;</span></code></pre><h3 id="navicat连接mysql报错1251解决方案"><a href="#navicat连接mysql报错1251解决方案" class="headerlink" title="navicat连接mysql报错1251解决方案"></a>navicat连接mysql报错1251解决方案</h3><p>MySQL8.0，发现Navicat连接不上，总是报错1251；</p><p>原因是MySQL8.0版本的加密方式和MySQL5.0的不一样，连接会报错。</p><p>1.先通过命令行进入mysql的root账户：</p><pre><code class="hljs ebnf"><span class="hljs-attribute">mysql -uroot -p</span></code></pre><p>2.更改加密方式</p><pre><code class="hljs routeros">ALTER<span class="hljs-built_in"> USER </span><span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;password&#x27;</span> PASSWORD EXPIRE NEVER;</code></pre><p>3.重新修改密码（注意修改你要远程连接的用户）</p><pre><code class="hljs routeros">ALTER<span class="hljs-built_in"> USER </span><span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_passwordBY <span class="hljs-string">&#x27;password&#x27;</span>;</code></pre><p>4.刷新</p><pre><code class="hljs sql"><span class="hljs-keyword">FLUSH</span> <span class="hljs-keyword">PRIVILEGES</span>;</code></pre><h3 id="Docker6with-环境变量和镜像配置"><a href="#Docker6with-环境变量和镜像配置" class="headerlink" title="Docker6with 环境变量和镜像配置"></a>Docker6with 环境变量和镜像配置</h3><pre><code class="hljs sql">备注： : When this is true (which is its default state, unless MYSQL_ROOT_PASSWORD is <span class="hljs-keyword">set</span> <span class="hljs-keyword">or</span> MYSQL_ALLOW_EMPTY_PASSWORD <span class="hljs-keyword">is</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> <span class="hljs-literal">true</span>), a random <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> the <span class="hljs-keyword">server</span><span class="hljs-string">&#x27;s root user is generated when the Docker container is started</span><span class="hljs-string">当这个MYSQL_RANDOM_ROOT_PASSWORD 为true 时 为root用户设置密码是没有作用的还是会生成随机的密码，设置为false 或者不加这个环境变量  </span></code></pre><p>用外部mount</p><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -d -p 3306:3306 -e <span class="hljs-attribute">MYSQL_USER</span>=<span class="hljs-string">&quot;username&quot;</span>  -e <span class="hljs-attribute">MYSQL_PASSWORD</span>=<span class="hljs-string">&quot;password&quot;</span>  -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=<span class="hljs-string">&quot;password&quot;</span>  --mount <span class="hljs-attribute">type</span>=bind,source=C:\mysql\conf\my.cnf,target=/etc/my.cnf --mount <span class="hljs-attribute">type</span>=bind,source=C:\mysql\data,target=/var/lib/mysql --name mysql01 mysql/mysql-server</code></pre><p>用外部volume</p><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> --name mysql01 -v=<span class="hljs-regexp">/docker/my</span>sql<span class="hljs-regexp">/config/my</span>.cnf:<span class="hljs-regexp">/etc/my</span>.cnf -v=<span class="hljs-regexp">/docker/my</span>sql<span class="hljs-regexp">/config/</span>data:<span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/mysql mysql/my</span>sql-server</code></pre><p>在window环境下,挂载mysql 配置文件</p><p>详细步骤:</p><p>1.提前在指定的目录下创建一个my.cnf文件,目录名最好为英文且不带特殊符号和空格,文件内容如下，注意：粘贴时要把每一行末尾的空格去除，否则运行时会报错说utf8编码错误</p><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><span class="hljs-attr">user</span>=mysql<span class="hljs-attr">character-set-server</span>=utf8<span class="hljs-section">[client]</span><span class="hljs-attr">default-character-set</span>=utf8<span class="hljs-section">[mysql]</span><span class="hljs-attr">default-character-set</span>=utf8</code></pre><ol><li>将文件所在的磁盘设为共享磁盘,这样docker才有权限对文件进行读写,方法:启动docker后,点</li><li>击桌面右下角docker图标,右键选择settings,在SharedDrives 中勾选文件所在的磁盘,完成后docker需要重启</li></ol><p><img src="https://images-cdn.shimo.im/t4SsLcr5uqgbKLdh/image.png!thumbnail" alt="图片"></p><ol start="3"><li>执行以下命令,磁盘路径(d:/mysql/config/my.cnf)需要根据自己配置文件所在的位置修改<pre><code class="hljs awk">docker run -d -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> -e MYSQL_ROOT_PASSWORD=password123 -e   MYSQL_ROOT_HOST=% -v e:<span class="hljs-regexp">/mysql/</span>config<span class="hljs-regexp">/my.cnf:/</span>etc<span class="hljs-regexp">/my.cnf --name mysql01 mysql/my</span>sql-server</code></pre></li><li>使用 docker ps 查看是否启动,状态为 healthy 时 才算成功,然后通过以下命令进入容器</li></ol><pre><code class="hljs php">docker exec -it mysql01 bash<span class="hljs-comment"># 确认配置文件是否正确挂载</span><span class="hljs-comment"># 确认root登录密码</span>``password123</code></pre><p>5,最后可以用navicat 等外部工具测试是否能在外部正常连接docker<img src="https://images-cdn.shimo.im/PxzNhEgXlhEipHAT/image.png!thumbnail" alt="图片"></p><p><img src="https://images-cdn.shimo.im/9FRX20jYPP4VsLjX/image.png!thumbnail" alt="图片"></p><p><img src="https://images-cdn.shimo.im/CLnM7HV5jtYTrqHF/image.png!thumbnail" alt="图片"></p><p>(亲测有效)</p><p>所先创建相关文件夹与路径</p><p>c:/docker/mysql/config/my.cnf</p><p>c:/docker/mysql/data</p><p>需要使用官方mysql直接而不是使用mysql/mysql-server版本</p><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -d -p 3306:3306 -e <span class="hljs-attribute">MYSQL_USER</span>=sqltest -docker <span class="hljs-builtin-name">run</span> -d -p 3306:3306 -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=password123 -e   <span class="hljs-attribute">MYSQL_ROOT_HOST</span>=% -v e:/mysql/config/my.cnf:/etc/my.cnf --name mysql01 mysql/mysql-server</code></pre><p>e MYSQL_PASSWORD=pwd123 -e MYSQL_ROOT_PASSWORD=pwd123 -e MYSQL_ROOT_HOST=% -v c:/docker/mysql/config/my.cnf:/etc/my.cnf  -v c:/docker/mysql/data:/var/lib/mysql –name mysql01 mysql</p><p>外部Volume安装mongo on Cent OS</p><p>外部Volume安装mongo on Cent OS //添加外部登录</p><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">27017</span>:<span class="hljs-number">27017</span> --name mongo01 -v <span class="hljs-regexp">/docker/m</span>ongo<span class="hljs-regexp">/config:/</span>data<span class="hljs-regexp">/configdb -v /</span>docker<span class="hljs-regexp">/mongo/</span>db:<span class="hljs-regexp">/data/</span>db mongo --auth</code></pre><pre><code class="hljs sqf">docker <span class="hljs-built_in">exec</span> -it mongo01 mongo <span class="hljs-built_in">admin</span></code></pre><pre><code class="hljs reasonml">db.create<span class="hljs-constructor">User(&#123; <span class="hljs-params">user</span>: &#x27;<span class="hljs-params">jsmith</span>&#x27;, <span class="hljs-params">pwd</span>: &#x27;<span class="hljs-params">some</span>-<span class="hljs-params">initial</span>-<span class="hljs-params">password</span>&#x27;, <span class="hljs-params">roles</span>: [ &#123; <span class="hljs-params">role</span>: <span class="hljs-string">&quot;userAdminAnyDatabase&quot;</span>, <span class="hljs-params">db</span>: <span class="hljs-string">&quot;admin&quot;</span> &#125; ] &#125;)</span>;</code></pre><p>Windows10挂载Mongo镜像：</p><p>已知问题：无法使用Windows路径挂载，改用虚拟磁盘方式OK。</p><p>【实测通过】</p><p>来源：<a href="http://www.moguf.com/post/windockerrunmongo">http://www.moguf.com/post/windockerrunmongo</a></p><pre><code class="hljs sql"><span class="hljs-comment">--创建数据卷</span>docker volume <span class="hljs-keyword">create</span> <span class="hljs-comment">--name mongodata</span><span class="hljs-comment">--挂载数据卷运行mongo数据库</span>docker run <span class="hljs-comment">--name mongodb -v mongodata:/data/db -p 27017:27017 -d mongo:latest [--auth]</span>注：测试使用，不需要账号权限不要加 <span class="hljs-comment">--auth</span>参数：docker run 运行容器<span class="hljs-comment">--name mongodb 运行容器的名称为mongodb</span>-v mongodata:/<span class="hljs-keyword">data</span>/db 挂接保存数据的位置，冒号前面是本机（mongodata），后面是虚拟机中的映射目录（/<span class="hljs-keyword">data</span>/db）-p <span class="hljs-number">27017</span>:<span class="hljs-number">27017</span> 映射端口，前面是本机端口，后面是docker内的端口<span class="hljs-comment">--auth 授权访问</span><span class="hljs-comment">--登录镜像</span>docker exec -it mongodb mongo <span class="hljs-keyword">admin</span><span class="hljs-comment">--创建账号</span>db.createUser(&#123;<span class="hljs-keyword">user</span>: <span class="hljs-string">&#x27;root&#x27;</span>,pwd: <span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-keyword">roles</span>: [ &#123; <span class="hljs-keyword">role</span>: <span class="hljs-string">&quot;userAdminAnyDatabase&quot;</span>, db: <span class="hljs-string">&quot;admin&quot;</span> &#125; ]&#125;);<span class="hljs-comment">--账号授权</span>db.auth(&quot;root&quot;,&quot;admin&quot;);</code></pre><h3 id="Deploy-docker-registry"><a href="#Deploy-docker-registry" class="headerlink" title="Deploy docker registry"></a>Deploy docker registry</h3><p>本地运行registry仓库</p><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -d -p 5000:5000 <span class="hljs-attribute">--restart</span>=always --name registry registry:2</code></pre><p>本地registry - 可视化UI</p><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -d --name registry-web --link registry:registry -e <span class="hljs-attribute">ENV_DOCKER_REGISTRY_HOST</span>=registry -e <span class="hljs-attribute">ENV_DOCKER_REGISTRY_PORT</span>=5000 -p 8080:80 konradkleine/docker-registry-frontend:v2</code></pre><p>带https证书 （请注意我们host上放证书的文件夹叫cert, not certs)</p><pre><code class="hljs haml">docker run -d \-<span class="ruby">-restart=always \</span><span class="ruby">--name registry \</span><span class="ruby">-v <span class="hljs-string">`pwd`</span>/<span class="hljs-symbol">cert:</span>/certs \</span><span class="ruby">-e REGISTRY_HTTP_ADDR=<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">443</span> \</span><span class="ruby">-e REGISTRY_HTTP_TLS_CERTIFICATE=<span class="hljs-regexp">/certs/</span><span class="hljs-number">1_</span>hub.jessetalk.cn_bundle.crt \</span><span class="ruby">-e REGISTRY_HTTP_TLS_KEY=<span class="hljs-regexp">/certs/</span><span class="hljs-number">2_</span>hub.jessetalk.cn.key \</span><span class="ruby">-p <span class="hljs-number">443</span><span class="hljs-symbol">:</span><span class="hljs-number">443</span> \</span><span class="ruby"><span class="hljs-symbol">registry:</span><span class="hljs-number">2</span></span></code></pre><p>创建密码文件</p><pre><code class="hljs properties"><span class="hljs-attr">mkdir</span> <span class="hljs-string">auth</span><span class="hljs-attr">yum -y install httpd</span><span class="hljs-attr">htpasswd</span> <span class="hljs-string">-Bbn testuser testpassword &gt; auth/htpasswd</span><span class="hljs-attr">下面的不再支持</span><span class="hljs-attr">docker</span> <span class="hljs-string">run \</span><span class="hljs-meta">--entrypoint</span> <span class="hljs-string">htpasswd \</span><span class="hljs-attr">registry</span>:<span class="hljs-string">2 -Bbn testuser testpassword &gt; auth/htpasswd</span></code></pre><p>Base Authentication 用户名和密码</p><pre><code class="hljs haml">docker run -d \-<span class="ruby">-restart=always \</span><span class="ruby">--name registry \</span><span class="ruby">-v <span class="hljs-string">`pwd`</span>/<span class="hljs-symbol">auth:</span>/auth \</span><span class="ruby">-e <span class="hljs-string">&quot;REGISTRY_AUTH=htpasswd&quot;</span> \</span><span class="ruby">-e <span class="hljs-string">&quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot;</span> \</span><span class="ruby">-e <span class="hljs-string">&quot;REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd&quot;</span>\</span><span class="ruby">-v <span class="hljs-string">`pwd`</span>/<span class="hljs-symbol">cert:</span>/certs \</span><span class="ruby">-v /root/docker/<span class="hljs-symbol">registry:</span>/var/lib/registry\</span><span class="ruby">  -e REGISTRY_HTTP_ADDR=<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">443</span> \</span><span class="ruby">-e REGISTRY_HTTP_TLS_CERTIFICATE=<span class="hljs-regexp">/certs/</span><span class="hljs-number">1_</span>hub.jessetalk.cn_bundle.crt \</span><span class="ruby">-e REGISTRY_HTTP_TLS_KEY=<span class="hljs-regexp">/certs/</span><span class="hljs-number">2_</span>hub.jessetalk.cn.key \</span><span class="ruby">-p <span class="hljs-number">443</span><span class="hljs-symbol">:</span><span class="hljs-number">443</span> \</span><span class="ruby"><span class="hljs-symbol">registry:</span><span class="hljs-number">2</span></span></code></pre><p>githlab ：基础docker 安装的地址</p><p><a href="https://docs.gitlab.com/omnibus/docker/">https://docs.gitlab.com/omnibus/docker/</a></p><p>提升gitlab-ci runner  permission</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo usermod -aG docker gitlab-runner</span></code></pre><p>Kitematic 图形化管理Docker容器与镜像：</p><pre><code class="hljs angelscript">下载地址：https:<span class="hljs-comment">//kitematic.com/</span>解压缩复制到：C:\Program Files\Docker启动：docker鲸鱼图标--&gt;右键--&gt;Kitematic使用Docker账号登录<span class="hljs-number">1</span> 直接查看容器运行信息<span class="hljs-number">2</span> 图形操作启动、关闭、删除任意容器</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2020/11/14/hello-world/"/>
    <url>/blog/2020/11/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
